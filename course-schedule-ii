class Solution
{
public:
    // int n=0;
    vector<vector<int>> graph;
    vector<bool> vis;
    stack<int> st;

    void addEdge(int u, int v)
    {
        graph[u].push_back(v);
    }

    bool canFinish(int numCourses, vector<vector<int>> &prerequisites)
    {
        int n = numCourses;
        graph.resize(n, vector<int>());
        vis.resize(n, false);
        queue<int> que, ans;
        //count incidentedge
        vector<int> incidentEdges(n, 0);

        //form graph
        for (int i = 0; i < prerequisites.size(); i++)
        {
            addEdge(prerequisites[i][0], prerequisites[i][1]);
        }

        for (int i = 0; i < n; i++)
        {
            for (int ele : graph[i])
            {
                incidentEdges[ele]++;
            }
        }

        for (int i = 0; i < n; i++)
        {
            if (!incidentEdges[i])
            {
                que.push(i);
            }
        }

        while (que.size() > 0)
        {
            int v = que.front();
            ans.push(v);
            que.pop();
            if (vis[v])
            {
                continue;
            }
            vis[v] = true;
            for (int el : graph[v])
            {
                if (!(--incidentEdges[el]))
                {
                    que.push(el);
                }
            }
        }
        if (n == ans.size())
        {
            return true;
        }
        else
        {
            return false;
        }
    }
};
