#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int n = 9;
vector<int> graph[n];

void addEdge(int u, int v, int w)
{
    graph[u].push_back(v);
}

void topoDfs(vector<bool> &vis, int src, vector<int> &st)
{
    vis[src] = true;
    for (int el : graph[src])
    {
        if (!vis[el])
        {
            topoDfs(vis, el, st);
        }
    }
    st.push_back(src);
}

void topoDfsDriverFunction()
{
    vector<bool> vis(n, false);
    vector<int> st;
    for (int i = 0; i < n; i++)
    {
        if (!vis[i])
            topoDfs(vis, i, st);
    }
    for (int i = st.size() - 1; i >= 0; i--)
    {
        cout << st[i] << endl;
    }
}

//Khan's algo
void khansAlgo()
{
    //to find correct topolgical sorting order of a graph

    vector<int> incidentEdges(n, 0);
    for (int i = 0; i < n; i++)
    {
        for (int e : graph[i])
        {
            incidentEdges[e]++;
        }
    }

    queue<int> que, ans;
    for (int i = 0; i < n; i++)
    {
        if (!incidentEdges[i])
        {
            que.push(i);
        }
    }

    while (que.size()!=0)
    {
        int v = que.front();
        ans.push(v);
        que.pop();

        for (int el : graph[v])
        {
            if (!--incidentEdges[el])
            {
                que.push(el);
            }
        }
    }

    if (n == ans.size())
    {
        while (ans.size()!=0)
        {
            cout << ans.front() << endl;
            ans.pop();
        }
    }
    else
    {
        cout<<"cycle found, not a perfect topolgical sort can be found"<<endl;
    }
}

void solve()
{
    topoDfsDriverFunction();
}

void createGraph()
{
    addEdge(0, 1, 10);
    addEdge(0, 3, 10);
    addEdge(1, 2, 10);
    addEdge(2, 3, 40);
    addEdge(3, 4, 2);
    addEdge(4, 5, 2);
    addEdge(4, 6, 8);
    addEdge(5, 6, 3);
    addEdge(7, 8, 3);
    addEdge(2, 7, 3);
    addEdge(2, 8, 3);
}

int main()
{
    createGraph();
    solve();
    return 0;
}
